# -*- coding: utf-8 -*-
"""CSE111Lab6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XF2mNu5C-9U_-3nPNzCANPy0xWDnI9ij
"""

#1
class Student:
  ID=0
  def __init__(self,name,department,age,cgpa):
    self.name=name
    self.department=department
    self.age=age
    self.cgpa=cgpa
    Student.ID+=1

  def get_details(self):
    print(f"ID:{Student.ID}\n"
    f"Name:{self.name}\n"
    f"Department:{self.department}\n"
    f"Age:{self.age}\n"
    f"CGPA:{self.cgpa}")

  @classmethod
  def from_String(cls,info):
    name,department,age,cgpa=info.split("-")
    return Student(name,department,age,cgpa)

s1 = Student("Samin", "CSE", 21, 3.91)
s1.get_details()
print("-----------------------")
s2 = Student("Fahim", "ECE", 21, 3.85)
s2.get_details()
print("-----------------------")
s3 = Student("Tahura", "EEE", 22, 3.01)
s3.get_details() 
print("-----------------------")
s4 = Student.from_String("Sumaiya-BBA-23-3.96")
s4.get_details()

print("Subtask5= Class variable are universal variable for every object created under that class while instance variable are unique for each object created under that particular class.")
print("=============================================================================")
print("Subtask6= Class methods are can only manipulate class behaviour while instance methods can only manipulate object behaviour")

#2
class Assassin:
  assassin_num=0

  def __init__(self,name,success_rate=100):
    self.name=name
    self.success_rate=success_rate
    Assassin.assassin_num+=1

  def printDetails(self):
    print(f"Name:{self.name}\n"
    f"Success rate:{self.success_rate}%\n"
    f"Total number of Assassin:{Assassin.assassin_num}")

  @classmethod
  def failureRate(cls,name,f_rate):
    return Assassin(name,(100-f_rate))

  @classmethod
  def failurePercentage(cls,name,f_per):
    z=100-int(f_per[:-1])
    return Assassin(name,z)

john_wick = Assassin('John Wick', 100)
john_wick.printDetails()
print('================================')
nagisa = Assassin.failureRate("Nagisa", 20)
nagisa.printDetails()
print('================================')
akabane = Assassin.failurePercentage("Akabane", "10%")
akabane.printDetails()

#3
class Passenger:
  count=0

  def __init__(self,name):
    self.name=name
    self.bus_fare=450
    Passenger.count+=1

  def set_bag_weight(self,weight):
    self.weight=weight

  def printDetail(self):
    if self.weight<=20:
      self.bus_fare=450
    elif 21<=self.weight<=50:
      self.bus_fare+=50
    else:
      self.bus_fare+=100

    print(f"Name:{self.name}\n"
    f"Bus Fare:{self.bus_fare}")


print("Total Passenger:", Passenger.count)
p1 = Passenger("Jack")
p1.set_bag_weight(90)
p2 = Passenger("Carol")
p2.set_bag_weight(10)
p3 = Passenger("Mike")
p3.set_bag_weight(25)
print("=========================")
p1.printDetail()
print("=========================")
p2.printDetail()
print("=========================")
p3.printDetail()
print("=========================")
print("Total Passenger:", Passenger.count)

#4
class Travel:
  count=0

  def __init__(self,source,destination,time=1):
    self.source=source
    self.destination=destination
    self.time=time
    Travel.count+=1

  def set_time(self,time):
    self.time=time

  def set_source(self,source):
    self.source=source
  
  def set_destination(self,destination):
    self.destination=destination

  def display_travel_info(self):
    return f"Source:{self.source}\nDestination:{self.destination}\nFlight Time:{self.time}:00"

print("No. of Traveller =",Travel.count)
print("=======================")
t1 = Travel("Dhaka","India")
print(t1.display_travel_info())
print("=======================")
t2 = Travel("Kuala Lampur","Dhaka")
t2.set_time(23)
print(t2.display_travel_info())
print("=======================")
t3 = Travel("Dhaka","New_Zealand")
t3.set_time(15)
t3.set_destination("Germany")
print(t3.display_travel_info())
print("=======================")
t4 = Travel("Dhaka","India")
t4.set_time(9)
t4.set_source("Malaysia")
t4.set_destination("Canada")
print(t4.display_travel_info())
print("=======================")
print("No. of Traveller =", Travel.count)

#5
class Employee:

  def __init__(self,name,workingPeriod):
    self.name=name
    self.workingPeriod=workingPeriod
    self.year=2022
  
  @classmethod
  def employeeByJoiningYear(cls,name,year):
    return Employee(name,(2022-year))

  @staticmethod
  def experienceCheck(workingPeriod,gender):
    if workingPeriod<3 and gender=='male':
      return "He is not experienced"
    elif workingPeriod<3 and gender=='female':
      return "She is not experienced"
    elif workingPeriod>=3 and gender=='male':
      return "He is experienced"
    elif workingPeriod>=3 and gender=='female':
      return "She is experienced"
    else:
      pass

employee1 = Employee('Dororo', 3)
employee2 = Employee.employeeByJoiningYear('Harry', 2016)
print(employee1.workingPeriod)
print(employee2.workingPeriod)
print(employee1.name)
print(employee2.name)
print(Employee.experienceCheck(2, "male"))
print(Employee.experienceCheck(3, "female"))

#6
class Laptop:
  laptopCount=0
  
  def __init__(self,name,count):
    self.name=name
    self.count=count
    Laptop.laptopCount+=count

  @classmethod
  def advantage(cls):
    print("Laptops are portable")

  @classmethod
  def resetCount(cls):
    cls.laptopCount=0

lenovo = Laptop("Lenovo", 5);
dell = Laptop("Dell", 7);
print(lenovo.name, lenovo.count)
print(dell.name, dell.count)
print("Total number of Laptops", Laptop.laptopCount)
Laptop.advantage()
Laptop.resetCount()
print("Total number of Laptops", Laptop.laptopCount)

#7
class Cat:
  Number_of_cats=0
  def __init__(self,color,position):
    self.__color=color
    self.__position=position
    Cat.Number_of_cats+=1

  @classmethod
  def no_parameter(cls):
    col="White"
    pos="sitting"
    return cls(col,pos)

  @classmethod
  def first_parameter(cls,col):
    pos="sitting"
    return cls(col,pos)

  @classmethod
  def second_parameter(cls,pos):
    col='Grey'
    return cls(col,pos)

  def printCat(self):
    print(f"{self.__color} cat is {self.__position}")

  def changeColor(self,color):
    self.__color=color

print("Total number of cats:", Cat.Number_of_cats)
c1 = Cat.no_parameter()
c2 = Cat.first_parameter("Black")
c3 = Cat("Brown", "jumping")
c4 = Cat("Red", "purring")
c5 = Cat.second_parameter("playing")
print("=======================")
c1.printCat()
c2.printCat()
c3.printCat()
c4.printCat()
c5.printCat()
c1.changeColor("Blue")
c3.changeColor("Purple")
c1.printCat()
c3.printCat()
print("=======================")
print("Total number of cats:", Cat.Number_of_cats)

#8
import math

class Cylinder:
  radius=5
  height=18

  def __init__(self,radius,height):
    print(f"Default radius={Cylinder.radius} and height={Cylinder.height}.")
    
    Cylinder.radius=radius
    Cylinder.height=height

    print(f"Updated: radius={Cylinder.radius} and height={Cylinder.height}.")


  @classmethod
  def swap(cls,h,r):
    return Cylinder(r,h)

  @classmethod
  def changeFormat(cls,info):
    r,h=info.split("-")
    r=float(r)
    h=float(h)
    return Cylinder(r,h)

  @staticmethod
  def area(r,h):
    area=2*math.pi*(r**2)+2*math.pi*r*h
    print(f"Area:{area}")
  
  @staticmethod
  def volume(r,h):
    volume=math.pi*(r**2)*h
    print(f"Volume:{volume}")

c1 = Cylinder(0,0)
Cylinder.area(c1.radius,c1.height)
Cylinder.volume(c1.radius,c1.height)
print("===============================")
c2 = Cylinder.swap(8,3)
c2.area(c2.radius,c2.height)
c2.volume(c2.radius,c2.height)
print("===============================")
c3 = Cylinder.changeFormat("7-13")
c3.area(c3.radius,c3.height)
c3.volume(c3.radius,c3.height)
print("===============================")
Cylinder(0.3,5.56).area(Cylinder.radius,Cylinder.height)
print("===============================")
Cylinder(3,5).volume(Cylinder.radius,Cylinder.height)

#9
class Student:
  total_student=0
  BRAC_student=0
  other_student=0
  
  def __init__(self,name,dept,institute="BRAC University"):
    self.name=name
    self.dept=dept
    self.institute=institute
    Student.total_student+=1

    if institute=="BRAC University":
      Student.BRAC_student+=1
    else:
      Student.other_student+=1


  @classmethod
  def printDetails(cls):
    print(f"Total Student(s):{Student.total_student}\nBRAC University Student(s):{Student.BRAC_student}\nOther Institution Student(s):{Student.other_student}")
    
  @classmethod
  def createStudent(cls,name,dept,institute="BRAC University"):
    return cls(name,dept,institute)

  def individualDetail(self):
    print(f"Name:{self.name}\nDepartment:{self.dept}\nInstitution:{self.institute}")

Student.printDetails()
print('#########################')
mikasa = Student('Mikasa Ackerman', "CSE")
mikasa.individualDetail()
print('------------------------------------------')
Student.printDetails()
print('========================')
harry = Student.createStudent('Harry Potter', "Defence Against Dark Arts", "Hogwarts School")
harry.individualDetail()
print('-------------------------------------------')
Student.printDetails()
print('=========================')
levi = Student.createStudent("Levi Ackerman", "CSE")
levi.individualDetail()
print('--------------------------------------------')
Student.printDetails()

#10
class SultansDine:
  total_branch=0
  total_sell=0
  lst=[]
  def __init__(self,location):
    self.location=location
    self.quantity=0
    SultansDine.total_branch+=1
    SultansDine.lst.append([location])

  def sellQuantity(self,quantity):
    self.quantity=quantity

  def branchInformation(self):
    branch_sell=0
    if self.quantity < 10:
      branch_sell = self.quantity * 300
    elif self.quantity < 20:
      branch_sell = self.quantity * 350
    else:
      branch_sell = self.quantity * 400

    SultansDine.total_sell+=branch_sell
    SultansDine.lst[SultansDine.total_branch-1]=[branch_sell]
    print(f"Branch Name:{self.location}\nBranch Sell:{branch_sell} Taka")
  
  @classmethod
  def details(cls):
    print(f"Total Number of branch(s):{SultansDine.total_branch}\n"
    f"Total Sell:{SultansDine.total_sell} Taka")
    for i in SultansDine.lst:
      print(f"Branch Name: {i}, Branch Sell: {i} Taka")
      sell="{:.2f}".format((i/SultansDine.total_sell)*100)
      print(f"Branch consists of total sell's: {sell}%")






SultansDine.details()
print('########################')
dhanmodi = SultansDine('Dhanmondi')
dhanmodi.sellQuantity(25)
dhanmodi.branchInformation()
print('-----------------------------------------')
SultansDine.details()
print('========================')
baily_road = SultansDine('Baily Road')
baily_road.sellQuantity(15)
baily_road.branchInformation()
print('-----------------------------------------')
SultansDine.details()
print('========================')
gulshan = SultansDine('Gulshan')
gulshan.sellQuantity(9)
gulshan.branchInformation()
print('-----------------------------------------')
SultansDine.details()

class SultansDine:
 total_sell=0
 total_branch=0
 listt=[]
 
 def __init__(self,place):
   self.place=place
   self.quantity=0
   SultansDine.total_branch+=1
   SultansDine.listt.append([self.place])
 
 def sellQuantity(self,quantity):
   self.quantity=quantity
 
 def branchInformation(self):
   Branch_sell=0
   if self.quantity<10:
     Branch_sell=self.quantity*300
   elif self.quantity<20:
     Branch_sell=self.quantity*350
   else:
     Branch_sell=self.quantity*400
     SultansDine.total_sell+=Branch_sell
     SultansDine.listt[SultansDine.total_branch-1]+=[Branch_sell]
     print(f"Branch Name: {self.place}")
     print(f"Branch Sell: {Branch_sell} Taka")

 @classmethod
 def details(cls):
    print(f"Total Number of branch(s): {SultansDine.total_branch}")
    print(f"Total Sell: {SultansDine.total_sell} Taka")
    for i in SultansDine.listt:
      print(f"Branch Name: {i}, Branch Sell: {i} Taka")
      sell_per="{:.2f}".format((i/SultansDine.total_sell)*100)
      print(f"Branch consists of total sell's: {sell_per}%")
 
SultansDine.details()
print('########################')
dhanmodi = SultansDine('Dhanmondi')
dhanmodi.sellQuantity(25)
dhanmodi.branchInformation()
print('-----------------------------------------')
SultansDine.details()
print('========================')
baily_road = SultansDine('Baily Road')
baily_road.sellQuantity(15)
baily_road.branchInformation()
print('-----------------------------------------')
SultansDine.details()
print('========================')
gulshan = SultansDine('Gulshan')
gulshan.sellQuantity(9)
gulshan.branchInformation()
print('-----------------------------------------')
SultansDine.details()