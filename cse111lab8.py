# -*- coding: utf-8 -*-
"""CSE111Lab8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17F2aqaWmk1nGPjXUtUAg5VHSFzhX7Cbg
"""

#2
class RealNumber:
  def __init__(self, number=0):
    self.number = number
  def __add__(self, anotherRealNumber):
    return self.number + anotherRealNumber.number
  def __sub__(self, anotherRealNumber):
    return self.number - anotherRealNumber.number
  def __str__(self):
    return str(self.number)

class ComplexNumber(RealNumber):
  def __init__(self,real,img):
    super().__init__(int(str(real)))
    self.img=img

  def __add__(self,other):
    real=super().__add__(other)
    complx=self.img+other.img
    return ComplexNumber(real,complx)

  def __sub__(self, other):
     real=super().__sub__(other)
     complx=self.img-other.img
     return ComplexNumber(real,complx)

  def __str__(self):
    if self.img<0:
      return f"{(self.number)} - {(self.img*-1)}i"
    else:
      return f"{(self.number)} + {(self.img)}i"

r1 = RealNumber(3)
r2 = RealNumber(5)
print(r1+r2)
cn1 = ComplexNumber(2, 1)
print(cn1)
cn2 = ComplexNumber(r1, 5)
print(cn2)
cn3 = cn1 + cn2
print(cn3)
cn4 = cn1 - cn2
print(cn4)

#3
class Account:
  def __init__(self, balance):
   self._balance = balance
  def getBalance(self):
   return self._balance

class CheckingAccount(Account):
  numberOfAccount=0
  def __init__(self,balance=0.0):
    super().__init__(balance)
    #self.account=0
    CheckingAccount.numberOfAccount+=1
  def __str__(self):
    if super().getBalance()==0:
      return f"Account Balance:{super().getBalance()}"
    else:
      return f"Account Balance:{super().getBalance()}"

print('Number of Checking Accounts: ', CheckingAccount.numberOfAccount)
print(CheckingAccount())
print(CheckingAccount(100.00))
print(CheckingAccount(200.00))
print('Number of Checking Accounts: ', CheckingAccount.numberOfAccount)

#4
class Fruit:
 def __init__(self, formalin=False, name=''):
  self.__formalin = formalin
  self.name = name
 
 def getName(self):
  return self.name
 
 def hasFormalin(self):
  return self.__formalin
 
class testFruit:
 def test(self, f):
  print('----Printing Detail----')
  if f.hasFormalin():
    print('Do not eat the',f.getName(),'.')
    print(f)
  else:
    print('Eat the',f.getName(),'.')
    print(f)
 
class Mango(Fruit):
  def __init__(self,formalin=True,name="Mangoes"):
    super().__init__(formalin,name)

  def __str__(self):
    if self.hasFormalin==True:
      return self.getName()+" are bad for you"
    else:
      return self.getName()+" are good for you"

class Jackfruit(Fruit):
  def __init__(self,formalin=True,name="Jackfruites"):
    super().__init__(formalin,name)

  def __str__(self):
    if self.hasFormalin==True:
      return self.getName()+" are bad for you"
    else:
      return self.getName()+" are good for you"

m = Mango()
j = Jackfruit()
t1 = testFruit()
t1.test(m)
t1.test(j)

#7
class PokemonBasic:
  def __init__(self, name = 'Default', hp = 0,weakness = 'None', type = 'Unknown'):
    self.name = name
    self.hit_point = hp
    self.weakness = weakness
    self.type = type
  def get_type(self):
    return 'Main type: ' + self.type
  def get_move(self):
    return 'Basic move: ' + 'Quick Attack'
  def __str__(self):
    return "Name: " + self.name + ", HP: " +str(self.hit_point) + ", Weakness: " + self.weakness

class PokemonExtra( PokemonBasic):
  def __init__(self,*info):
    super().__init__(info[0],info[1],info[2],info[3])

    if len(info)==4:
      self.sectype=None
      self.other=None
    else:
      self.sectype=info[4]
      self.other=info[5]
  
  def get_move(self):
    if self.other!=None:
      print(super().get_move())
      return f"Secondary type:{self.sectype}\nOther move:{self.other[0]},{self.other[1]}"
    else:
      return super().get_move()
print('\n------------Basic Info:--------------')
pk = PokemonBasic()
print(pk)
print(pk.get_type())
print(pk.get_move())
print('\n------------Pokemon 1 Info:-------------')
charmander = PokemonExtra('Charmander', 39, 'Water','Fire')
print(charmander)
print(charmander.get_type())
print(charmander.get_move())
print('\n------------Pokemon 2 Info:-------------')
charizard = PokemonExtra('Charizard', 78, 'Water','Fire', 'Flying', ('Fire Spin', 'Fire Blaze'))
print(charizard)
print(charizard.get_type())
print(charizard.get_move())

#1
class RealNumber:
 
 def __init__(self, r=0):
  self.__realValue = r 
 def getRealValue(self):
  return self.__realValue
 def setRealValue(self, r):
  self.__realValue = r
 def __str__(self):
  return 'RealPart: '+str(self.getRealValue()) 

class ComplexNumber(RealNumber):

  def __init__(self,r=1,i=1):
    super().__init__(float(r))
    self.__img=float(i)
  def getImaginaryValue(self):
    return self.__img
  def __str__(self):
    return super().__str__()+"\nImaginaryPart:"+str(self.getImaginaryValue())
 
cn1 = ComplexNumber()
print(cn1)
print('---------')
cn2 = ComplexNumber(5,7)
print(cn2)

#3
class Account:
 def __init__(self, balance):
  self._balance = balance
 
 def getBalance(self):
  return self._balance

class CheckingAccount(Account):

  numberOfAccount=0
  def __init__(self,balance=0.0):
    super().__init__(float(balance))
    CheckingAccount.numberOfAccount+=1

  def __str__(self):
    if super().getBalance()==0:
      return f"Account Balance:{self.getBalance()}"
    else:
      return f"Account Balance:{self.getBalance():.2f}"
 
 
print('Number of Checking Accounts: ', CheckingAccount.numberOfAccount)
print(CheckingAccount())
print(CheckingAccount(100.00))
print(CheckingAccount(200.00))
print('Number of Checking Accounts: ', CheckingAccount.numberOfAccount)

#4
class Fruit:
 def __init__(self, formalin=False, name=''):
  self.__formalin = formalin
  self.name = name
  
 def getName(self):
  return self.name
 
 def hasFormalin(self):
  return self.__formalin
 
class testFruit:
 def test(self, f):
  print('----Printing Detail----')
  if f.hasFormalin():
    print('Do not eat the',f.getName(),'.')
    print(f)
  else:
    print('Eat the',f.getName(),'.')
    print(f)
 
class Mango(Fruit):
  def __init__(self,formalin=True,name="Mango"):
    super().__init__(formalin,name)

  def __str__(self):
    if self.hasFormalin()==True:
      return self.getName()+"es"+" are bad for you"
    else:
      return self.getName()+"es"+" are good for you"

class Jackfruit(Fruit):
  def __init__(self,formalin=False,name="Jackfruit"):
    super().__init__(formalin,name)
    self.name=name

  def __str__(self):
    if self.hasFormalin()==True:
      return self.getName()+"s"+ "are bad for you"
    else:
      return self.getName()+"s"+" are good for you"

m = Mango()
j = Jackfruit()
t1 = testFruit()
t1.test(m)
t1.test(j)

#5
class Exam:
  def __init__(self,marks):
    self.marks = marks
    self.time = 60
  def examSyllabus(self):
    return "Maths , English"
  def examParts(self):
    return "Part 1 - Maths\nPart 2 - English\n"

class ScienceExam(Exam):
  def __init__(self,marks,time,*subjects):
    super().__init__(marks)
    self.time=time
    self.subjects=subjects
  def examSyllabus(self):
    syllabus=super().examSyllabus()
    for sub in self.subjects:
      syllabus+=","+sub
    return syllabus
  def examParts(self):
    parts=super().examParts()
    for sub in self.subjects:
      if self.subjects.index(sub)==(len(self.subjects)-1):
         parts+=f"Part{self.subjects.index(sub)+3} - {sub}"
      else:
         parts+=f"Part{self.subjects.index(sub)+3} - {sub}\n"
    return parts
  def __str__(self):
    return f"Marks:{self.marks} Time:{self.time} Number of Parts:{len(self.subjects)+2}"

engineering = ScienceExam(100,90,"Physics","HigherMaths")
print(engineering)
print('----------------------------------')
print(engineering.examSyllabus())
print(engineering.examParts())
print('==================================')
architecture = ScienceExam(100,120,"Physics","HigherMaths","Drawing")
print(architecture)
print('----------------------------------')
print(architecture.examSyllabus())
print(architecture.examParts())

#6
class Shape3D:
 pi = 3.14159
 def __init__(self, name = 'Default', radius = 0):
  self._area = 0
  self._name = name
  self._height = 'No need'
  self._radius = radius 
 def calc_surface_area(self):
  return 2 * Shape3D.pi * self._radius
 def __str__(self):
  return "Radius: "+str(self._radius)

class  Sphere(Shape3D):
  def __init__(self,name,radius):
    super().__init__(name,radius)
    print(f"Shape name:{self._name},Area Formula: 4 * pi * r * r")
  def calc_surface_area(self):
    self._area=super().calc_surface_area()*2*self._radius
    return self._area
  def __str__(self):
    return f"{super().__str__()},Height:{self._height}\nArea:{self._area}"

class Cylinder(Shape3D):
  def __init__(self,name,radius,height):
    super().__init__(name,radius)
    self._height =height
    print(f"Shape name:{self._name},Area Formula: 2 * pi * r * (r + h)")
  def calc_surface_area(self):
    self._area=super().calc_surface_area()*(self._radius+self._height)
    return self._area
  def __str__(self):
    return f"{super().__str__()},Height:{self._height}\nArea:{self._area}"

sph = Sphere('Sphere', 5)
print('----------------------------------')
sph.calc_surface_area()
print(sph)
print('==================================')
cyl = Cylinder('Cylinder', 5, 10)
print('----------------------------------')
cyl.calc_surface_area()
print(cyl)

#7
class PokemonBasic:
 def __init__(self, name = 'Default', hp = 0, weakness = 'None', type = 'Unknown'):
  self.name = name
  self.hit_point = hp
  self.weakness = weakness
  self.type = type
 def get_type(self):
  return 'Main type: ' + self.type
 def get_move(self):
  return 'Basic move: ' + 'Quick Attack'
 def __str__(self):
  return "Name: " + self.name + ", HP: " + str(self.hit_point) + ", Weakness: " + self.weakness

class PokemonExtra( PokemonBasic):
  def __init__(self,*info):
    super().__init__(info[0],info[1],info[2],info[3])

    if len(info)==4:
      self.sectype=None
      self.other=None
    else:
      self.sectype=info[4]
      self.other=info[5]
  
  def get_move(self):
    if self.other!=None:
      print(super().get_move())
      return f"Secondary type:{self.sectype}\nOther move:{self.other[0]},{self.other[1]}"
    else:
      return super().get_move()
    
  
print('\n------------Basic Info:--------------')
pk = PokemonBasic()
print(pk)
print(pk.get_type())
print(pk.get_move())
print('\n------------Pokemon 1 Info:-------------')
charmander = PokemonExtra('Charmander', 39, 'Water', 'Fire')
print(charmander)
print(charmander.get_type())
print(charmander.get_move())
print('\n------------Pokemon 2 Info:-------------')
charizard = PokemonExtra('Charizard', 78, 'Water', 
'Fire', 'Flying', ('Fire Spin', 'Fire Blaze'))
print(charizard)
print(charizard.get_type())
print(charizard.get_move())

#8
class Team:
 def __init__(self, name):
  self.name = "default"
  self.total_player = 5
 def info(self):
  print("We love sports")

class FootBallTeam(Team):
  def __init__(self,name):
    super().__init__(name)
    self.name=name
    self.total_player=11
  def info(self):
    print(f"Our name is {self.name}\nWe play Football")
    super().info()


class CricketTeam(Team):
  def __init__(self,name):
    super().__init__(name)
    self.name=name
    self.total_player=11
  def info(self):
    print(f"Our name is {self.name}\nWe play Cricket")
    super().info()


class Team_test:
 def check(self, tm):
  print("=========================")
  print("Total Player: ", tm.total_player)
  tm.info()

f = FootBallTeam("Brazil")
c = CricketTeam("Bangladesh")
test = Team_test()
test.check(f)
test.check(c)

#9
class Pokemon:
 def __init__(self, p):
  self.pokemon = p
  self.pokemon_type = "Needs to be set"
  self.pokemon_weakness = "Needs to be set"
 def kind(self):
  return self.pokemon_type 
 def weakness(self):
  return self.pokemon_weakness
 def what_am_i(self):
  print("I am a Pokemon.")

class Pikachu(Pokemon):
  def __init__(self,p="Pikachu",pokemon_type="Electric",pokemon_weakness="Ground"):
    super().__init__(p)
    self.pokemon =p
    self.pokemon_type ="Electric"
    self.pokemon_weakness="Ground"
  def kind(self):
    super().kind()   
  def weakness(self):
    super().weakness()
  def what_am_i(self):
    print("I am a Pokemon.\nI am Pikachu")
    
  
class Charmander(Pokemon):
    def __init__(self,p="Pikachu",pokemon_type= "Fire",pokemon_weakness="Water, Ground and Rock"):
      super().__init__(p)
      self.pokemon =p
      self.pokemon_type =pokemon_type
      self.pokemon_weakness=pokemon_weakness

    def kind(self):
      super().kind()   
    def weakness(self):
      super().weakness()
    def what_am_i(self):
      print("I am a Pokemon.\nI am Charmander")
  
pk1 = Pikachu()
print("Pokemon:", pk1.pokemon)
print("Type:", pk1.kind())
print("Weakness:", pk1.weakness())
pk1.what_am_i()
print("========================")
c1 = Charmander()
print("Pokemon:", c1.pokemon)
print("Type:", c1.kind())
print("Weakness:", c1.weakness())
c1.what_am_i()