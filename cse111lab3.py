# -*- coding: utf-8 -*-
"""CSE111Lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bgAotKpR0Oo81RYSk1GQkmiBR7woilss
"""

#1
class Calculator:
  def __init__(self):
    print("Letâ€™s Calculate!")
  def add(self,num1,num2):
    result=num1+num2
    return result
  def subtraction(self,num1,num2):
    result=num1-num2
    return result
  def multiplication(self,num1,num2):
    result=num1*num2
    return result
  def division(self,num1,num2):
    result=num1/num2
    return result

c1=Calculator()
first=int(input("Value 1:"))
operator=input("Operator:")
second=int(input("Value 2:"))

if operator=='+':
  print("Result:",c1.add(first,second))
elif operator=='-':
  print("Result:",c1.subtraction(first,second))
elif operator=='*':
  print("Result:",c1.multiplication(first,second))
elif operator=='/':
  print("Result:",c1.division(first,second))

#2
class Course:
  def __init__(self,name,faculty,section):
    self.name=name
    self.faculty=faculty
    self.section=section
  def detail(self):
    print(self.name,'-',self.faculty,'-',self.section)
c1 = Course("CSE110", "TBA", 8)
c1.detail()
print("===============")
c2 = Course("CSE111", "TBA", 9)
c2.detail()

#3
class Patient:
  def __init__(self,name,age,weight,height):
    self.name=name
    self.age=age
    self.weight=weight
    self.height=height
    
    h=height/100
    self.BMI=weight/(h)**2

  def printDetails(self):
    print("Name:",self.name)
    print("Age:",self.age)
    print("Weight:",self.weight,'kg')
    print("Height:",self.height,'cm')
    print("BMI:",self.BMI)
  
p1 = Patient("A", 55, 63.0, 158.0)
p1.printDetails()
print("====================")
p2 = Patient("B", 53, 61.0, 149.0)
p2.printDetails()

#4
class Vehicle:
 def __init__(self,x=0,y=0):
   self.x=x
   self.y=y
 def moveUp(self):
   self.y=self.y+1
 def moveDown(self):
   self.y=self.y-1
 def moveRight(self):
   self.x=self.x+1
 def moveLeft(self):
   self.x=self.x-1
 def print_position(self):
    print(f"({self.x},{self.y})")
car = Vehicle()
car.print_position()
car.moveUp()
car.print_position()
car.moveLeft()
car.print_position()
car.moveDown()
car.print_position()                                                          
car.moveRight()

#5
class Shape:
  def __init__(self,name,val1,val2):
    self.name=name
    self.val1=val1
    self.val2=val2

  def area(self):
    if self.name=="Triangle":
      area=0.5*self.val1*self.val2
      print("Area:",area)
    elif self.name=="Rhombus":
      area=0.5*self.val1*self.val2
      print("Area:",area)
    elif self.name=="Square":
      area=self.val1*self.val2
      print("Area:",area)
    elif self.name=="Rectangle":
      area=self.val1*self.val2
      print("Area:",area)
    elif self.name=="Trapezium":
      area='Shape Unknown'
      print("Area:",area)

triangle = Shape("Triangle",10,25)
triangle.area()
print("==========================")
square = Shape("Square",10,10)
square.area()
print("==========================")
rhombus = Shape("Rhombus",18,25)
rhombus.area()
print("==========================")
rectangle = Shape("Rectangle",15,30)
rectangle.area()
print("==========================")
trapezium = Shape("Trapezium",15,30)
trapezium.area()

#6
class Calculator:
  def __init__(self):
    print("Calculator is ready!")
  def calculate(self,num1,num2,operator):
    self.num1=num1
    self.num2=num2
    self.operator=operator
    if operator=='+':
      val=self.num1+self.num2
      return val
    elif operator=='-':
      val=self.num1-self.num2
      return val
    elif operator=='*':
      val=self.num1*self.num2
      return val
    elif operator=='/':
      val=self.num1/self.num2
      return val
  def showCalculation(self):
    print(self.num1,self.operator,self.num2,'=',val)


c1 = Calculator()
print("==================")
val = c1.calculate(10, 20, '+')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 10, '-')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 5, '*')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 16, '/')
print("Returned value:", val)
c1.showCalculation()

#7
class Student:
  def __init__(self,name,ID,Department,CGPA):
    self.name=name
    self.ID=ID
    self.Department=Department
    self.CGPA=CGPA
  def calculate_CGPA(self):
    count=0
    for i in self.CGPA:
      count+=(i*3)
    CGPA=count/(len(self.CGPA)*3)
    self.CGPA=CGPA
  def print_details(self):
    print(f"Name:{self.name},ID:{self.ID}")
    print(f"Department:{self.Department}")
    print(f"CGPA:{self.CGPA}")
    if self.CGPA>3.80:
      print("Your academic standing is 'Highest Distinction'")
    elif self.CGPA>3.65:
      print("Your academic standing is 'High Distinction'")
    elif self.CGPA>3.50:
      print("Your academic standing is 'Distinction'")
    elif self.CGPA>2.00:
      print("Your academic standing is 'Satisfactory'")
    elif self.CGPA<2.00:
      print("Sorry, you cannot graduate")

s1 = Student('Dora', '15995599','CSE', [4,3.7,3.7,4])
s1.calculate_CGPA()
print("==========================")
s1.print_details()
print("==========================")
s2 = Student('Pingu', '12312322', 'EEE', [1.7,1.3,1.3,1.3,1])
s2.calculate_CGPA()
print("==========================")
s2.print_details()
print("==========================")
s3 = Student('Bob', '13311331', 'CSE', [2,3,3,3.7,2.7,2.7])
s3.calculate_CGPA()
print("==========================")
s3.print_details()

#8
class Shinobi:
    def __init__(self, name, rank):
        self.name = name
        self.rank = rank
        self.salary = 0
        self.mission = 0

    def changeRank(self, new_rank):
        self.rank = new_rank

    def calSalary(self, mission):
        self.mission = mission

        if self.rank == "Genin":
            self.salary = self.mission * 50
        elif self.rank == "Chunin":
            self.salary = self.mission * 100
        else:
            self.salary = self.mission * 500
    def printInfo(self):
        print(f"Name: {self.name}")
        print(f"Rank: {self.rank}")
        print(f"Number of mission: {self.mission}")
        print(f"Salary: {self.salary}")


naruto = Shinobi("Naruto", "Genin")
naruto.calSalary(5)
naruto.printInfo()
print("====================")
shikamaru = Shinobi("Shikamaru", "Genin")
shikamaru.printInfo()
shikamaru.changeRank("Chunin")
shikamaru.calSalary(10)
shikamaru.printInfo()
print("====================")
neiji = Shinobi("Neiji", "Jonin")
neiji.calSalary(5)
neiji.printInfo()

#9
class Programmer:
 def __init__(self,name,language,Exp):
   print("Horray! A new programmer is born")
   self.name=name
   self.language=language
   self.Exp=Exp
 
 
 def addExp(self,addExp):
   print("Updating experience of",self.name)
   self.Exp=self.Exp+addExp
 
 
 def printDetails(self):
   print("Name:",self.name)
   print("Language:",self.language)
   print("Experience:",self.Exp,"years")
 
 
p1 = Programmer("Ethen Hunt", "Java", 10)
p1.printDetails()
print('--------------------------')
p2 = Programmer("James Bond", "C++", 7)
p2.printDetails()
print('--------------------------')
p3 = Programmer("Jon Snow", "Python", 4)
p3.printDetails()
p3.addExp(5)
p3.printDetails()

#10
class UberEats:
  def __init__(self,name,mblnum,address):
    self.name=name
    self.mblnum=mblnum
    self.address=address
    print(self.name,"welcome to UberEats!")
  def add_items(self,item1,item2,price1,price2):
    self.item1=item1
    self.item2=item2
    self.price1=price1
    self.price2=price2
  def print_order_detail(self):
    print(f"User details: Name:{self.name}",',',f"Phone:{self.mblnum}",',',f"Address:{self.address}")
    print('Orders:','{',self.item1,':',self.price1,',',self.item2,':',self.price2,'}')
    return f"Total Paid Amount:{self.price1+self.price2}"

order1 = UberEats("Shakib", "01719658xxx", "Mohakhali")
print("=========================")
order1.add_items("Burger", "Coca Cola", 220, 50)
print("=========================")
print(order1.print_order_detail())
print("=========================")
order2 = UberEats ("Siam", "01719659xxx", "Uttara")
print("=========================")
order2.add_items("Pineapple", "Dairy Milk", 80, 70)
print("=========================")
print(order2.print_order_detail())

#11
class Spotify:
  def __init__(self,song_list):
    self.song_list=song_list
    print("Welcome to Spotify!")
  def playing_number(self,number):
    self.number=number
    length=len(self.song_list)
    if self.number>length:
      return f"{self.number} number song not found.Your playlist has {length} songs only \n##########################"
    else:
      return f"Playing {self.number} number song for you \nSong name:{self.song_list[self.number-1]}"
  def add_to_playlist(self,song):
    self.song=song
    self.song_list.append(self.song)


user1 = Spotify(["See You Again", "Uptown Funk", "Hello"])
print("=========================")
print(user1.playing_number(4))
user1.add_to_playlist("Dusk Till Dawn")
print(user1.playing_number(3))
print(user1.playing_number(4))

"""Extra of prev. assignment-3"""

#1
class DataType:
  def __init__(self,name,value):
    self.name=name
    self.value=value

data_type1 = DataType('Integer', 1234)
print(data_type1.name)
print(data_type1.value)
print('=====================')
data_type2 = DataType('String', 'Hello')
print(data_type2.name)
print(data_type2.value)
print('=====================')
data_type3 = DataType('Float', 4.0)
print(data_type3.name)
print(data_type3.value)

#2
class Flower:
  def __init__(self):
    self.name=''
    self.color=''
    self.num_of_petal=''
flower1 = Flower()
flower1.name="Rose"
flower1.color="Red"
flower1.num_of_petal=6
print("Name of this flower:", flower1.name)
print("Color of this flower:",flower1.color)
print("Number of petal:",flower1.num_of_petal)
print("=====================")
flower2 = Flower()
flower2.name="Orchid"
flower2.color="Purple"
flower2.num_of_petal=4
print("Name of this flower:",flower2.name)
print("Color of this flower:",flower2.color)
print ("Number of petal:",flower2. num_of_petal)

#3
class Wadiya():
  def __init__(self):
    self.name = 'Aladeen'
    self.designation = 'President Prime Minister Admiral General'
    self.num_of_wife = 100
    self.dictator = True

wadiya=Wadiya()
print('Part 1:')
print(f'Name of President:{wadiya.name}')
print(f'Designation:{wadiya.designation}')
print(f'Number of wife:{wadiya.num_of_wife}')
print(f'Is he/she a dictator:{wadiya.dictator}')

print('Part 2:')
wadiya.name ='Donald Trump'
wadiya.designation = 'President'
wadiya.num_of_wife =1
wadiya.dictator =False
print(f'Name of President:{wadiya.name}')
print(f'Designation:{wadiya.designation}')
print(f'Number of wife:{wadiya.num_of_wife}')
print(f'Is he/she a dictator:{wadiya.dictator}')

#6
class Player:
  def __init__(self):
    self.name=None
    self.jersy_number=None
    self.position=None

player1 = Player()
player1.name = "Ronaldo"
player1.jersy_number = 9
player1.position = "Striker"
print("Name of the Player:", player1.name)
print("Jersey Number of player:", player1.jersy_number)
print("Position of player:", player1.position)
print("===========================")
player2 = Player()
player2.name = "Neuer"
player2.jersy_number = 1
player2.position = "Goal Keeper"
print("Name of the player:", player2.name)
print("Jersey Number of player:", player2.jersy_number)
print("Position of player:", player2.position)

#8
class DemonSlayer:
  def __init__(self,name,style,number_of_technique,kill):
    self.name=name
    self.style=style
    self.number_of_technique=number_of_technique
    self.kill=kill
    
tanjiro = DemonSlayer("Tanjiro", "Water Breathing", 10, 10)
print('Name:',tanjiro.name)
print('Fighting Style:',tanjiro.style)
print(f'Knows {tanjiro.number_of_technique} technique(s) and has killed {tanjiro.kill} demon(s)')
print('===================')
zenitsu = DemonSlayer("Zenitsu", "Thunder Breathing", 1, 4)
print('Name:',zenitsu.name)
print('Fighting Style:',zenitsu.style)
print(f'Knows {zenitsu.number_of_technique} technique(s) and has killed {zenitsu.kill} demon(s)')
print('===================')
inosuke = DemonSlayer("Inosuke", "Beast Breathing", 5, 7)
print('Name:',inosuke.name)
print('Fighting Style:',inosuke.style)
print(f'Knows {inosuke.number_of_technique} technique(s) and has killed {inosuke.kill} demon(s)')
print('===================')
print(f'{tanjiro.name}, {zenitsu.name}, {inosuke.name} knows {tanjiro.number_of_technique + zenitsu.number_of_technique + inosuke.number_of_technique} techniques')
print(f'They have killed total {tanjiro.kill + zenitsu.kill + inosuke.kill} demons')

##############
class Student:
  def __init__(self,name,ID,gender=None,DOB=None):
    self.name=name
    self.ID=ID
    self.gender=gender
    self.DOB=DOB
    self.uniqueKey=self.name+self.ID
    space=' '
    if len(ID)!=0:
      print('Student ID must have 8 digits')
    if space not in name:
      print('Invaild name given')
class Course:
  def __init__(self,year,grade,semCompleted):
    self.year=year
    self.grade=grade
    self.semCompleted=semCompleted
  def AddStudent(self,student,crs):
    self.student=student
    self.crs=crs

s1=Student('Taylor Swift',22101240)
s2=Student('Selena Gomez',22101241,'Female','30.10.22')
s3=Student('Billie Eilish',221012426)
s4=Student('Justin',22101243) 
c1=Course('CSE')
CSE111=Course(2016,3.85,4)
CSE111.AddStudent()