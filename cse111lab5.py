# -*- coding: utf-8 -*-
"""CSE111Lab5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11vI2es--2I6Wk5bDW7Mxsm-zpVonHN8Q
"""

#1
class Marks:

  def __init__(self,mark):
    self.mark=mark

  def __add__(self,other):
    sum=self.mark+other.mark
    obj=Marks(sum)
    return obj

Q1 = Marks(int(input("Quiz 1 (out of 10): ")))
Q2 = Marks(int(input("Quiz 2 (out of 10): ")))
Lab = Marks(int(input("Lab (out of 30): ")))
Mid = Marks(int(input("Mid (out of 20): ")))
Final = Marks(int(input("Final (out of 30): ")))
total = Q1 + Q2 + Lab + Mid + Final
print("Total marks: {}".format(total.mark))

#2
class Teacher:
  def __init__(self,name,dept):
    self.__name=name
    self.__dept=dept
    self.__course=[]
  def addCourse(self,obj):
    self.__course.append(obj.course)
  def printDetail(self):
    print(f"====================================\n"
    f"Name:{self.__name}\n"
    f"Department:{self.__dept}\n"
    f"List of courses\n"
    f"====================================")
    for i in self.__course:
      print(i)
    print("====================================")

class Course:
  def __init__(self,course):
    self.course=course
  

t1 = Teacher("Saad Abdullah", "CSE")
t2 = Teacher("Mumit Khan", "CSE")
t3 = Teacher("Sadia Kazi", "CSE") 
c1 = Course("CSE 110 Programming Language I") 
c2 = Course("CSE 111 Programming Language-II") 
c3 = Course("CSE 220 Data Structures") 
c4 = Course("CSE 221 Algorithms") 
c5 = Course("CCSE 230 Discrete Mathematics") 
c6 = Course("CSE 310 Object Oriented Programming") 
c7 = Course("CSE 320 Data Communications") 
c8 = Course("CSE 340 Computer Architecture")
t1.addCourse(c1)
t1.addCourse(c2)
t2.addCourse(c3)
t2.addCourse(c4)
t2.addCourse(c5)
t3.addCourse(c6)
t3.addCourse(c7)
t3.addCourse(c8)
t1.printDetail()
t2.printDetail()
t3.printDetail()

#3
class Team:

  def __init__(self,name=None):
    self.__name=name
    self.__lst=[]

  def setName(self,name):
    self.__name=name

  def addPlayer(self,obj):
    self.__lst.append(obj.player)

  def printDetail(self):
    print(f"=====================\n"
    f"Team:{self.__name}\n"
    f"List of Players:\n"
    f"{self.__lst}\n"
    f"=====================")

class Player:
  def __init__(self,player):
    self.player=player

b = Team()
b.setName('Bangladesh')
mashrafi = Player("Mashrafi")
b.addPlayer(mashrafi)
tamim = Player("Tamim")
b.addPlayer(tamim)
b.printDetail()
a = Team("Australia")
ponting = Player("Ponting")
a.addPlayer(ponting)
lee = Player("Lee")
a.addPlayer(lee)
a.printDetail()

#4
class Color:
  def __init__(self,color):
    if color=='red' or color=='yellow' or color=='blue':
      self.clr=color
    else:
      if color=='redyellow' or color=='yellowred':
        self.clr='Orange'
      elif color=='redblue' or color=='bluered':
        self.clr='Violet'
      elif color=='yellowblue' or color=='blueyellow':
        self.clr='Green'
  def __add__(self,other):
    clr=self.clr + other.clr
    return Color(clr)
C1 = Color(input("First Color: ").lower())
C2 = Color(input("Second Color: ").lower())
C3 = C1 + C2
print("Color formed:", C3.clr)

#5
import math

class Circle:

  def __init__(self,radius):
    self.__r=radius

  def getRadius(self):
    return self.__r

  def setRadius(self,radius):
    self.__r=radius

  def area(self):
    return math.pi * self.__r**2

  def __add__(self,other):
    sum=self.__r + other.__r
    obj=Circle(sum)
    return obj
    
c1 = Circle(4)
print("First circle radius:" , c1.getRadius())
print("First circle area:" ,c1.area())
c2 = Circle(5)
print("Second circle radius:" ,c2.getRadius())
print("Second circle area:" ,c2.area())
c3 = c1 + c2
print("Third circle radius:" ,c3.getRadius())
print("Third circle area:" ,c3.area())

#6
class Triangle:

  def __init__(self,base,height):
    self.__base=base
    self.__height=height

  def getBase(self):
    return self.__base

  def setBase(self,base):
    self.__base=base

  def getHeight(self):
    return  self.__height

  def setHeight(self,height):
     self.__height=height

  def area(self):
    Area=0.5*self.__base*self.__height
    return Area
    
  def __sub__(self,other):
    new_base=self.__base-other.__base
    new_height=self.__height-other.__height
    return Triangle(new_base,new_height)

t1 = Triangle(10, 5)
print("First Triangle Base:" , t1.getBase())
print("First Triangle Height:" , t1.getHeight())
print("First Triangle area:" ,t1.area())
t2 = Triangle(5, 3)
print("Second Triangle Base:" , t2.getBase())
print("Second Triangle Height:" , t2.getHeight())
print("Second Triangle area:" ,t2.area())
t3 = t1 - t2
print("Third Triangle Base:" , t3.getBase())
print("Third Triangle Height:" , t3.getHeight())
print("Third Triangle area:" ,t3.area())

#7
class Dolls:

  def __init__(self,name,price):
    self.name=name
    self.price=price

  def detail(self):
    return f'Doll:{self.name}\nTotal Price:{self.price} Taka'

  def __gt__(self,other):
    if self.price>other.price:
      return True
    else:
      return False

  def __add__(self,other):
    new_doll=self.name+""+other.name
    total_price=self.price+other.price
    return Dolls(new_doll,total_price)

obj_1 = Dolls("Tweety", 2500)
print(obj_1.detail())
if obj_1 > obj_1:
  print("Congratulations! You get the Tweety as a gift!")
else:
  print("Thank you!")
print("=========================")
obj_2 = Dolls("Daffy Duck", 1800)
print(obj_2.detail())
if obj_2 > obj_1:
  print("Congratulations! You get the Tweety as a gift!")
else:
  print("Thank you!")
print("=========================")
obj_3 = Dolls("Bugs Bunny", 3000)
print(obj_3.detail())
if obj_3 > obj_1:
  print("Congratulations! You get the Tweety as a gift!")
else:
  print("Thank you!")
print("=========================")
obj_4 = Dolls("Porky Pig", 1500)
print(obj_4.detail())
if obj_4 > obj_1:
  print("Congratulations! You get the Tweety as a gift!")
else:
  print("Thank you!")
print("=========================")
obj_5 = obj_2 + obj_3
print(obj_5.detail())
if obj_5 > obj_1:
  print("Congratulations! You get the Tweety as a gift!")
else:
  print("Thank you!")

#8
class Coordinates:

  def __init__(self,x,y):
    self.x=x
    self.y=y
  
  def detail(self):
    return (self.x,self.y)
  def __sub__(self,other):
    sub1=self.x-other.x
    sub2=self.y-other.y
    return Coordinates(sub1,sub2)

  def __mul__(self,other):
    mul1=self.x*other.x
    mul2=self.y*other.y
    return Coordinates(mul1,mul2)

  def __eq__(self,other):
    if self.x==other.x and self.y==other.y:
      return f"The calculated coordinates are the same."
    else:
      return f"The calculated coordinates are NOT the same"


p1 = Coordinates(int(input()),int(input()))
p2 = Coordinates(int(input()),int(input()))
p4 = p1 - p2
print(p4.detail())
p5 = p1 * p2
print(p5.detail())
point_check = (p4 == p5)
print(point_check)