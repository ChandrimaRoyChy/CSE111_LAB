# -*- coding: utf-8 -*-
"""CSE111Lab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RabiGnHiSDsEWBtQoNvkJvm8m-Pk7tg3
"""

#1
class Customer:
  def __init__(self,name):
    self.name=name
  def greet(self,name=None):
    if name!=None:
      print(f'Hello,{self.name}!')
    else:
      print("Hello!")
  def purchase(self,*items):
    print(f"{self.name},you purchased {len(items)} item(s):")
    for i in items:
      print(i)
customer_1 = Customer("Sam")
customer_1.greet()
customer_1.purchase("chips", "chocolate", "orange juice")
print("-----------------------------")
customer_2 = Customer("David")
customer_2.greet("David")
customer_2.purchase("orange juice")

#2
class Panda:
  def __init__(self,name,gender,age):
    self.name=name
    self.gender=gender
    self.age=age
  def sleep(self,sleep_time=None):
    if sleep_time==None:
      return f"{self.name}'s duration is unknown thus should have only bamboo leaves"
    elif 3<=sleep_time<=5:
      return f'{self.name} sleeps {sleep_time} hours daily and should have Mixed Veggies'
    elif 6<=sleep_time<=8:
       return f'{self.name} sleeps {sleep_time} hours daily and should have Eggplant & Tofu'
    elif 9<=sleep_time<=11:
      return f'{self.name} sleeps {sleep_time} hours daily and should have Broccoli Chicken'
panda1 = Panda("Kunfu","Male", 5)
panda2=Panda("Pan Pan","Female",3)
panda3=Panda("Ming Ming","Female",8)
print("{} is a {} Panda Bear who is {} years old".format(panda1.name,panda1.gender,panda1.age))
print("{} is a {} Panda Bear who is {} years old".format(panda2.name,panda2.gender,panda2.age))
print("{} is a {} Panda Bear who is {} years old".format(panda3.name,panda3.gender,panda3.age))
print("===========================")
print(panda2.sleep(10))
print(panda1.sleep(4))
print(panda3.sleep())

#3
class Cat:
  def __init__(self,color='White',action='sitting'):
    self.color=color
    self.action=action
  def changeColor(self,color):
    self.color=color
  def printCat(self):
    print(f'{self.color} cat is {self.action}')
c1 = Cat()
c2 = Cat("Black")
c3 = Cat("Brown", "jumping")
c4 = Cat("Red", "purring")
c1.printCat()
c2.printCat()
c3.printCat()
c4.printCat()
c1.changeColor("Blue")
c3.changeColor("Purple")
c1.printCat()
c3.printCat()

#4
class Student:
  def __init__(self,name='default student'):
    self.name=name
    self.avg=0
   
  def quizcalc(self,*num):
    sum=0
    for i in num:
      sum+=i
    self.avg=sum/3
    
  def printdetail(self):
    print(f'Hello {self.name}')
    print(f'Your average quiz score is {self.avg}')

s1=Student()
s1.quizcalc(10)
print('--------------------------------')
s1.printdetail()
s2 = Student('Harry')
s2.quizcalc(10,8)
print('--------------------------------')
s2.printdetail()
s3 = Student('Hermione')
s3.quizcalc(10,9,10)
print('--------------------------------')
s3.printdetail()

#5
class Student:
  def __init__(self,name,ID,dept='CSE'):
    self.name=name
    self.ID=ID
    self.dept=dept

  def dailyEffort(self,hours):
    self.hours=hours
      
  def printDetails(self):
    print(f'Name:{self.name}')
    print(f'ID:{self.ID}')
    print(f'Department:{self.dept}')
    print(f'Daily Effort:{self.hours} hour(s)')
    if self.hours<=2:
      print('Suggestion: Should give more effort!')
    elif self.hours<=4:
      print('Suggestion: Keep up the good work!')
    else:
      print('Suggestion: Excellent! Now motivate others.')

harry = Student('Harry Potter', 123)
harry.dailyEffort(3)
harry.printDetails()
print('========================')
john = Student("John Wick", 456, "BBA")
john.dailyEffort(2)
john.printDetails()
print('========================')
naruto = Student("Naruto Uzumaki", 777, "Ninja")
naruto.dailyEffort(6)
naruto.printDetails()

#6
class Patient:
  def __init__(self,name,age):
    self.name=name
    self.age=age
  def add_Symptom(self,symp1=None,symp2=None,symp3=None):
    self.symp1=symp1
    self.symp2=symp2
    self.symp3=symp3
  def printPatientDetail(self):
    print(f'Name:{self.name}')
    print(f'Age:{self.age}')
    if self.symp1!=None and self.symp2==None and self.symp3==None:
      print(f'Symptoms:{self.symp1}')
    elif self.symp1!=None and self.symp2!=None and self.symp3==None:
      print(f'Symptoms:{self.symp1},{self.symp2}')
    else:
      print(f'Symptoms:{self.symp1},{self.symp2},{self.symp3}')
      
p1 = Patient('Thomas', 23)
p1.add_Symptom('Headache')
p2 = Patient('Carol', 20)
p2.add_Symptom('Vomiting', 'Coughing')
p3 = Patient('Mike', 25)
p3.add_Symptom('Fever', 'Headache', 'Coughing')
print("=========================")
p1.printPatientDetail()
print("=========================")
p2.printPatientDetail()
print("=========================")
p3.printPatientDetail()

#7
class Match:
  def __init__(self,teams):
    self.teams=teams
    self.run=0
    self.over=0
    self.wicket=0
    print('5..4..3..2..1.. Play !!!')
  def add_run(self,run):
    self.run+=run
  def add_over(self,over):
    if over>=5:
      print('Warning! Cannot add 5 over/s (5 over match)')
    else:
      self.over+=over
  def add_wicket(self,wicket):
    self.wicket+=wicket
  def print_scoreboard(self):
    team1,team2=self.teams.split('-')
    print('Batting Team:',team1)
    print('Bowling Team:',team2)
    return f'Total Runs: {self.run} Wickets: {self.wicket} Overs: {self.over}'

match1 = Match("Rangpur Riders-Cumilla Victorians")
print("=========================")
match1.add_run(4)
match1.add_run(6)
match1.add_over(1)
print(match1.print_scoreboard())
print("=========================")
match1.add_over(5)
print("=========================")
match1.add_wicket(1)
print(match1.print_scoreboard())

#8
class ParcelKoro:
  def __init__(self,name="No name set",product_weight=0):
    self.name=name
    self.product_weight=product_weight
    self.total_fee=0
    self.location_charge=0
  def calculateFee(self,location=None):
    self.location=location
    if location==None:
      self.location_charge=50
    elif location!=0:
      self.location_charge=100
    elif self.product_weight==0:
      self.total_fee=0
    else:
      self.total_fee=(self.product_weight*20)+self.location_charge
      return self.total_fee
    if self.product_weight!=0:
      self.total_fee=(self.product_weight*20)+self.location_charge
  def printDetails(self):
    print(f'Customer Name:{self.name}')
    print(f'Product Weight:{self.product_weight}')
    print(f'Total fee:{self.total_fee}')

print("**********************")
p1 = ParcelKoro()
p1.calculateFee()
p1.printDetails()
print("**********************")
p2 = ParcelKoro('Bob The Builder')
p2.calculateFee()
p2.printDetails()
print("----------------------------")
p2.product_weight = 15
p2.calculateFee()
p2.printDetails()
print("**********************")
p3=ParcelKoro('Dora The Explorer', 10)
p3.calculateFee('Dhanmondi')
p3.printDetails()

#9
class Batsman:
  def __init__(self,*arg):
    if len(arg)==3:
      self.name=arg[0]
      self.runs=arg[1]
      self.balls=arg[2] 
    else:
      self.name="New Batsman"
      self.runs=arg[0]
      self.balls=arg[1]
  def setName(self,name):
    self.name=name
  def printCareerStatistics(self):
    print(f'Name:{self.name}')
    print(f'Runs Scored:{self.runs},Balls Faced:{self.balls}')
  def battingStrikeRate(self):
    strike=(self.runs/self.balls)*100
    return strike
b1 = Batsman(6101, 7380)
b1.printCareerStatistics()
print("============================")
b2 = Batsman("Liton Das", 678, 773)
b2.printCareerStatistics()
print("----------------------------")
print(b2.battingStrikeRate())
print("============================")
b1.setName("Shakib Al Hasan")
b1.printCareerStatistics()
print("----------------------------")
print(b1.battingStrikeRate())

#10
class EPL_Team:
 def __init__(self,name,song="No Slogan",title=0):
   self.name=name
   self.song=song
   self.title=title
 
 
 def increaseTitle(self):
   self.title=self.title+1
 
 def changeSong(self,updateSong):
   self.song=updateSong
 
 
 def showClubInfo(self):
   return f"Name:{self.name}\nSong: {self.song}\nTotal No of title:{self.title}"

manu = EPL_Team('Manchester United', 'Glory Glory Man United')
chelsea = EPL_Team('Chelsea')
print('===================')
print(manu.showClubInfo())
print('##################')
manu.increaseTitle()
print(manu.showClubInfo())
print('===================')
print(chelsea.showClubInfo())
chelsea.changeSong('Keep the blue flag flying high')
print(chelsea.showClubInfo())

#11
class Author:
 def __init__(self,name='Default',*arg):
   self.name=name
   self.arg=arg
 def addBooks(self,*arg):
   self.arg=arg
 def changeName(self,change_name):
   self.name=change_name
 def printDetails(self):
   print(f'Author Name:{self.name}\n-------\nList of Books:')
   for i in self.arg:
     print(i)
 
 
auth1 = Author('Humayun Ahmed')
auth1.addBooks('Deyal', 'Megher Opor Bari')
auth1.printDetails()
print('===================')
auth2 = Author()
print(auth2.name)
auth2.changeName('Mario Puzo')
auth2.addBooks('The Godfather', 'Omerta', 'The Sicilian')
print('===================')
auth2.printDetails()
print('===================')
auth3 = Author('Paolo Coelho', 'The Alchemist', 'The Fifth Mountain')
auth3.printDetails()

#12
class TaxiLagbe:
  def __init__(self,number,location):
    self.number=number
    self.location=location
    self.passenger_name=[]
    self.charge=[]
    self.list1=[]
  def addPassenger(self,*passenger_info):
    for i in passenger_info:
      info=i.split('_')
      self.passenger_name.append(info[0])
      self.list1.append(info[0])
      self.charge.append(info[1])s1.printDetails()
    if len(self.list1)>4:
      print("Taxi Full! No more passengers can be added.")
      self.list1.pop()
      self.charge.pop()
    else:
      for j in self.passenger_name:
        print(f'Dear {j}! Welcome to TaxiLagbe.')
  def printDetails(self):
    print(f'Trip info for Taxi number:{self.number}')
    print(f'This taxi can cover only {self.location} area.')
    print(f'Total passengers:{len(self.list1)}')
    print(f'Passenger lists:\n{self.list1}')
    sum=0
    for x in self.charge:
      sum+=int(x)
    print(f'Total collected fare:{sum}')
taxi1 = TaxiLagbe('1010-01', 'Dhaka')
print('-------------------------------')
taxi1.addPassenger('Walker_100', 'Wood_200')
taxi1.addPassenger('Matt_100')
taxi1.addPassenger('Wilson_105')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi1.addPassenger('Karen_200')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi2 = TaxiLagbe('1010-02', 'Khulna')
taxi2.addPassenger('Ronald_115')
taxi2.addPassenger('Parker_215')
print('-------------------------------')
taxi2.printDetails()

#13
class Account:
  def __init__(self,name='Default Account',balance=0.00):
    self.name=name
    self.balance=balance
 
  def details(self):
    return f'{self.name}\n{self.balance}'
  def withdraw(self,balance1):
    amount=self.balance-balance1
    if amount<=3070:
       print('Sorry, Withdraw unsuccessful! The account balance after deducting withdraw amount is equal to or less than minimum.')
    else:
      print(f'Withdraw successful! New balance is:{amount}')

a1 = Account()
print(a1.details())
print("------------------------")
a1.name = "Oliver"
a1.balance = 10000.0
print(a1.details())
print("------------------------")
a2 = Account("Liam")
print(a2.details())
print("------------------------")
a3 = Account("Noah",400)
print(a3.details())
print("------------------------")
a1.withdraw(6930)
print("------------------------")
a2.withdraw(600)
print("------------------------")
a1.withdraw(6929)

#14
class StudentDatabase:
  def __init__(self,name,ID):
    self.name=name
    self.ID=ID
    self.grades={}
  def calculateGPA(self,grade_list,sem):
    course_list=[]
    total=0.0
    for i in grade_list:
      course,cgpa=i.split(':')
      course_list.append(course)
      total+=float(cgpa)*3
    CGPA=round(total/(len(grade_list)*3),2)
    self.grades[sem]={tuple(course_list):CGPA}
  def printDetails(self):
    print(f'Name:{self.name}')s1.printDetails()
    print(f'ID:{self.ID}')
    print("Courses taken in Summer2020: ")
    for x,y in self.grades.items():
      print(x,sep='\n')
      print(f'GPA:{y}')
s1 = StudentDatabase('Pietro', '10101222')
s1.calculateGPA(['CSE230: 4.0', 'CSE220: 4.0', 'MAT110: 4.0'], 
'Summer2020')
s1.calculateGPA(['CSE250: 3.7', 'CSE330: 4.0'], 'Summer2021')
print(f'Grades for {s1.name}\n{s1.grades}')
print('------------------------------------------------------')
s1.printDetails()
s2 = StudentDatabase('Wanda', '10103332')
s2.calculateGPA(['CSE111: 3.7', 'CSE260: 3.7', 'ENG101: 4.0'], 
'Summer2022')
print('------------------------------------------------------')
print(f'Grades for {s2.name}\n{s2.grades}')
print('------------------------------------------------------')
s2.printDetails()

"""Ungraded"""

#20
class Student:
  def __init__(self,name=None,dept=None):
    self.name=name
    self.dept=dept
    self.courses=[]
    if name==None and dept==None:
      print('Student name and department need to be set')
    elif dept==None:
      print(f'Department for {self.name} needs to be set')
    else:
      print(f'{self.name} is from {self.dept} department')
  def update_name(self,name):
    self.name=name
  def update_department(self,dept):
    self.dept=dept
  def enroll(self,*courses):
    for i in courses:
      self.courses.append(i)
  def printDetail(self):
    print(f'Name:{self.name}')
    print(f'Department:{self.dept}')
    print(f'{self.name} enrolled in {len(self.courses)} course(s):')
    for i in range(len(self.courses)):
      if i==len(self.courses)-1:
        print(self.courses[i])
      else:
        print(self.courses[i],end=',')
    '''or we can use
    print(",",join(self.courses))
    instead of the loop'''
    
s1 = Student()
print("=========================")
s2 = Student("Carol")
print("=========================")
s3 = Student("Jon","EEE")
print("=========================")
s1.update_name("Bob")
s1.update_department("CSE")
s2.update_department("BBA")
s1.enroll("CSE110","MAT110","ENG091")
s2.enroll("BUS101")
s3.enroll("MAT110","PHY111")
print("###########################")
s1.printDetail()
print("=========================")
s2.printDetail()
print("=========================")
s3.printDetail()

#21
class Student:
  def __init__(self,name,ID,dept):
    self.name=names1.printDetails()
    self.ID=ID
    self.dept=dept
    self.courses=[]
    
  def advise(self,*course):
    count=0
    credits=0.0
    for i in course:
      self.courses.append(i)
    credits=(len(self.courses))*3.0
    print(f'{self.name},you have taken {credits} credits.')
    print("List of courses:",end='')
    for i in range(len(self.courses)):
      if i==len(self.courses)-1:
        print(self.courses[i])
      else:
        print(self.courses[i],end=',')
    if credits==9.0: 
      print('Status: Ok')
    elif credits<=9.0:
      count+=1
      print(f'Status: You have to take at least {count} more course.')
    elif credits>12.0:
      count+=1
      print(f'Status: You have to drop at least {count} course.')
  def details(self):
    print(f'Name:{self.name}')
    print(f'ID:{self.ID}')
    return f'Department:{self.dept}'
    
    
s1 = Student("Alice","20103012","CSE")
s2 = Student("Bob", "18301254","EEE")
s3 = Student("Carol", "17101238","CSE")
print("##########################")
print(s1.details())
print("##########################")
print(s2.details())
print("##########################")
s1.advise("CSE110","MAT110","PHY111")
print("##########################")
s2.advise("BUS101", "MAT120")
print("##########################")
s3.advise("MAT110", "PHY111", "ENG102","CSE111","CSE230")

#22
class Hotel:
  def __init__(self,name):
    self.name=name
    self.stf_ID=1
    self.gst_ID=1
  def addStuff(self,stf_name,stf_age,stf_phn='000'):
    self.stf_name=stf_name
    self.stf_age=stf_age
    self.stf_phn=stf_phn
    print(f'Staff With ID {self.stf_ID} is added')
  def getStuffById(self,stf_ID):
    self.stf_ID=stf_ID
    print(f'Staff ID:{self.stf_ID}')
    print(f'Name:{self.stf_name}')
    print(f'Age:{self.stf_age}')
    return f'Phone no.:{self.stf_phn}'
  def addGuest(self,gst_name,gst_age,gst_phn='000'):
    self.gst_name=gst_name
    self.gst_age=gst_age
    self.gst_phn=gst_phn
    print(f'Guest With ID {self.gst_ID} is added')
  def getGuestById(self,gst_ID):
    self.gst_ID=gst_ID
    print(f'Guest ID:{self.gst_ID}')
    print(f'Name:{self.gst_name}')
    print(f'Age:{self.gst_age}')
    return f'Phone no.:{self.gst_phn}'
  def allStaffs(self):
    print(f'All Staffs:\nNumber of Staff:{self.stf_ID}')
    print(f'Staff ID:{self.stf_ID} Name:{self.stf_name} Age:{self.stf_age} Phone no:{self.stf_phn}')
  def allGuest(self):
      print(f'All Guest:\nNumber of Guest:{self.gst_ID}')
      print(f'Guest ID:{self.gst_ID} Name:{self.gst_name} Age:{self.gst_age} Phone no:{self.gst_phn}')
h = Hotel("Lakeshore")
h.addStuff( "Adam", 26)
print("=================================")
print(h.getStuffById(1))
print("=================================")
h.addGuest("Carol",35,"123")
print("=================================")
print(h.getGuestById(1))
print("=================================")
h.addGuest("Diana", 32, "431")
print("=================================")
print(h.getGuestById(2))
print("=================================")
h.allStaffs()
print("=================================")
h.allGuest()

#23
class Author:
  def __init__(self,name=None):
    self.name=name
    self.book_list=[]
    self.genre_list=[]
    self.book_dict={}
  def addBook(self,book,genre):
    if book not in self.book_list:
      self.book_list.append(book)
    if genre not in self.genre_list:
      self.genre_list.append(genre)
    self.genre=genre
    if self.name==None:
      print('A book can not be added without author name')
  def setName(self,name):
    self.name=name
  def printDetail(self):
    print(f'Author Name:{self.name}')
    print(f'{self.book_dict}')
a1 = Author()
print("=================================")
a1.addBook("Ice","Science Fiction")
print("=================================")
a1.setName("Anna Kavan")
a1.addBook("Ice","Science Fiction")
a1.printDetail()
print("=================================")
a2 = Author("Humayun Ahmed")
a2.addBook("Onnobhubon","Science Fiction")
a2.addBook("Megher Upor Bari", "Horror")
print("=================================")
a2.printDetail()
a2.addBook("Ireena","Science Fiction")
print("=================================")
a2.printDetail()
print("=================================")

#23
class Author:
  def __init__(self,name=None):
    self.name=name
    self.book_list=[]
    self.genre_list=[]
    self.book_dict={}
  def addBook(self,book,genre):
    if 
a1 = Author()
print("=================================")
a1.addBook("Ice","Science Fiction")
print("=================================")
a1.setName("Anna Kavan")
a1.addBook("Ice","Science Fiction")
a1.printDetail()
print("=================================")
a2 = Author("Humayun Ahmed")
a2.addBook("Onnobhubon","Science Fiction")
a2.addBook("Megher Upor Bari", "Horror")
print("=================================")
a2.printDetail()
a2.addBook("Ireena","Science Fiction")
print("=================================")
a2.printDetail()
print("=================================")

#23
class Author:

a1 = Author()
print("=================================")
a1.addBook("Ice","Science Fiction")
print("=================================")
a1.setName("Anna Kavan")
a1.addBook("Ice","Science Fiction")
a1.printDetail()
print("=================================")
a2 = Author("Humayun Ahmed")
a2.addBook("Onnobhubon","Science Fiction”)
a2.addBook(“Megher Upor Bari”, “Horror”)
print(=================================")
a2.printDetail()
a2.addBook(“Ireena”, “Science Fiction”)
print("=================================")
a2.printDetail()
print("=================================")

#24
class Hospital:
  def __init__(self,name):
    self.name=name
  def addDoctor(self,Doctor):
    self.doctor=Doctor
  def addPatient(self,Patient):
    self.patient=Patient
  def getDoctorByID(self,dr_ID):
    print(f"Doctor's ID:{self.dr_ID}")
    print(f"Name:{self.dr_name}")
    print(f'Speciality:{self.speciality}')
  def getPatientByID(self,pa_ID):
    print(f"Patient's ID:{self.dpa_ID}")
    print(f"Name:{self.pa_name}")
    print(f'Age:{self.age}')
    print(f'Phone_no:{self.phn_no}')

class Doctor:
  def __init__(self,dr_ID,type,dr_name,speciality):
    self.dr_ID=dr_ID
    self.dr_name=dr_ID
    self.speciality=speciality
class Patient:
  def __init__(self,pa_ID,pa_name,age,phn_no):
    self.pa_ID=pa_ID
    self.pa_name=pa_name
    self.age=age
    self.phn_no=phn_no

h = Hospital("Evercare")
d1 = Doctor("1d","Doctor", "Samar Kumar", "Neurologist")
h.addDoctor(d1)
print("=================================")
print(h.getDoctorByID("1d"))
print("=================================")
p1 = Patient("1p","Patient", "Kashem Ahmed", 35, 12345)
h.addPatient(p1)
print("=================================")
print(h.getPatientByID("1p"))
print("=================================")
p2 = Patient ("2p","Patient", "Tanina Haque", 26, 33456)
h.addPatient(p2)
print("=================================")
print(h.getPatientByID("2p"))
print("=================================")
#h.allDoctors()
#h.allPatients()

#24
class Hospital:
  def __init__(self,name):
    self.doctor=''
    self.patient=''
    self.ddict={}
    self.pdict={}
  def addDoctor(self,doctor):
    self.doctor=doctor
  def addPatient(self,patient):
    self.patient=patient
  def getDoctorByID(self,ID1):
    if ID1==self.doctor.dID:
      print(f"Doctor's ID:{self.doctor.dID}")
      print(f"Name:{self.doctor.dname}")
      return f"Speciality:{self.doctor.speciality}"
  def getPatientByID(self,ID2):
    if ID2==self.patient.pID:
      print(f"Patient's ID:{self.patient.pID}")
      print(f"Name:{self.patient.pname}")
      print(f'Age:{self.patient.age}')
      return f'Phone no.:{self.patient.phn_no}'
  '''def allDoctors(self):
    print('All Doctors:')
    self.ddict[self.doctor.dID]=list()
    print(self.ddict)
  def allPatient(self):
    print('All Patients:')
    self.pdict[self.patient.pID]=list(f'{self.patient.name},{self.patient.age}')'''
class Doctor:
  def __init__(self,dID,identity1,dname,speciality):
    self.dID=dID
    self.identity1=identity1
    self.dname=dname
    self.speciality=speciality

class Patient:
  def __init__(self,pID,identity2,pname,age,phn_no):
    self.pID=pID
    self.identity2=identity2
    self.pname=pname
    self.age=age
    self.phn_no=phn_no

h = Hospital("Evercare")
d1 = Doctor("1d","Doctor", "Samar Kumar", "Neurologist")
h.addDoctor(d1)
print("=================================")
print(h.getDoctorByID("1d"))
print("=================================")
p1 = Patient("1p","Patient", "Kashem Ahmed", 35, 12345)
h.addPatient(p1)
print("=================================")
print(h.getPatientByID("1p"))
print("=================================")
p2 = Patient ("2p","Patient", "Tanina Haque", 26, 33456)
h.addPatient(p2)
print("=================================")
print(h.getPatientByID("2p"))
print("=================================")
#h.allDoctors()
#h.allPatients()

#25
class Vaccine:
  def __init__(self,name,md_in,interval):
    self.name=name
    self.md_in=md_in
    self.interval=interval
class Person:
  def __init__(self,pname,age,ptype='General Citizen'):
    self.pname=pname
    self.age=age
    self.ptype=ptype
    self.vac=""    #taking an empty string
    self.firstdose=False
    self.secdose=False
  def pushVaccine(self,vacN,dose="First dose"):
    
    if dose=="First dose":
      if self.age>=25 or self.ptype=="Student":
        self.vac=vacN     #vacN=the obj of vaccine class(astra,sin,mod) and storing the vacN in self.vac
        self.firstdose=True
        print(f'1st dose done for {self.pname}')
      else:
        print(f'Sorry {self.pname}, Minimum age for taking vaccines is 25 years now.')
    else:
      if self.vac.name!=vacN.name:
        print(f'Sorry {self.pname}, you can’t take 2 different vaccines')
      elif  self.firstdose==True:
        self.secdose=True
        print(f'2nd dose done for {self.pname}')
      #else:
        #print(f'1st dose done for {self.pype}')

  def showDetail(self):
    print(f'Name:{self.pname} Age:{self.age} Type:{self.ptype}')
    print(f'Vaccine name:{self.vac.name}')
    if self.secdose==True:
      print('1st dose: Given')
      print('2nd dose: Given')
    elif self.firstdose==True:
      print('1st dose: Given')
      print(f'2nd dose:Please come after {self.vac.interval} days')

astra = Vaccine("AstraZeneca", "UK", 60)
modr = Vaccine("Moderna", "UK", 30)
sin = Vaccine("Sinopharm", "China", 30)
p1 = Person("Bob", 21, "Student")
print("=================================")
p1.pushVaccine(astra)
print("=================================")
p1.showDetail()
print("=================================")
p1.pushVaccine(sin, "2nd Dose")
print("=================================")
p1.pushVaccine(astra, "2nd Dose")
print("=================================")
p1.showDetail()
print("=================================")
p2 = Person("Carol", 23, "Actor")
print("=================================")
p2.pushVaccine(sin)
print("=================================")
p3 = Person("David", 34)
print("=================================")
p3.pushVaccine(modr)
print("=================================")
p3.showDetail()
print("=================================")
p3.pushVaccine(modr, "2nd Dose")

####
class Student:
  def __init__(self,name,ID,age,gender):
    self.name=name
    self.ID=ID
    self.age=age
    self.gender=gender
  
  def add_course(self,list1):
    self.list1=list1
    print("Course Name:",self.list1[0])
    print("Course Code:",self.list1[1])
    print("Grade Achieved:",self.list1[2])
    print("Semester Completed:",self.list1[3])
    
  
  def add_vehicles(self,list2):
    self.list2=list2
    print("Vehicle Plate Number:",self.list2[0])
    print("Vehicle Type:",self.list2[1])
    print("Vehicle Color:",self.list2[2])
  
  def std_details(self):
    print("Name:",self.name)
    print("ID:",self.ID)
    print("Age:",self.age)
    print("Gender:",self.gender)

s1=Student('Carol',22107865,21,'male')
s1.std_details()

print('=================================')

s1.add_course(['CSE111',111,3.80,2])

print("===================================")

s1.add_vehicles([67542,'Car','Black'])

"""Lab Quiz"""

class Quiz:
  def __init__(self,crs,marks,total_mark=20):
    self.crs=crs
    self.marks=marks
    self.total_mark=total_mark
  def printDetails(self):
    print('Course:',self.crs)
    print('Mark:',self.marks)
    print('Total Mark:',self.total_mark)
Quiz1=Quiz('CSE110',15)
Quiz1.printDetails()

print('------------------------')

Quiz2=Quiz('CSE111',20,30)
Quiz2.printDetails()

#############
class Dominos:
  def __init__(self,shop_name):
    self.shop_name=shop_name
    self.counter=0
    print(f"Domino's.The Pizza Delivery Experts.")
  def addPizza(self,*obj):
    for i in obj:
      self.counter+=1
      #for j in range(1,len(obj)):
        #if 
  def show_menu(self):
    print(f"Total number of pizzas:{self.counter}")
    print(f"Chicken Pizza:")
    print(f"Name:")



class Pizza:
  def __init__(self,*food):
    self.list1=[]
    if len(food)<=1:
      self.list1.append(food[0])
      print('A pizza without toppings cannot be created')
    else:
      for i in food:
        self.list1.append(i)

  def setToppings(self,*add_toppings):
    print(f"Toppings added to {self.list1[0]} pizza")

dom=Dominos("Domino's Pizza")
print("1.====================================")
p1=Pizza("Spicy Chicken","Spicy Chicken","Onion","Capsicum")
dom.addPizza(p1)
p2=Pizza("Margherita","Mozzarella Cheese")
print("2.====================================")
p3=Pizza("Beef Kala Bhuna")
print("3.====================================")
p3.setToppings("Curried Beef","Capsicum","Paprika","Onion")
print("4.====================================")
dom.aadPizza(p2,p3)
p4=Pizza("Chicken Dominator","Barbecue Chicken,Spicy Chicken,Grilled Chicken")
p5=Pizza("Beefzza","Minced Beef","Beef Pepperoni","Onion","Jalapeno")
dom.addPizza(p4,p5)
print("5.=====================================")
dom.showMenu()
print("6.======================================")

"""Extra of prev. assignment- 4"""

